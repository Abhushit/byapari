{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/react_1/group24_first/src/components/products/editProduct/editProduct.component.js\";\nimport React, { Component } from 'react';\nimport httpClient from '../../util/httpClient';\nimport notify from '../../util/notify';\nimport Loader from '../../common/loader/loader.component';\nimport { ProductForm } from '../productForm/productForm.component';\nexport class EditProduct extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      product: ''\n    };\n  }\n\n  componentDidMount() {\n    this.productId = this.props.match.params['id'];\n    this.setState({\n      isLoading: true\n    });\n    httpClient.GET(`/product/${this.productId}`, true).then(response => {\n      this.setState({\n        product: response.data\n      });\n    }).catch(err => {\n      notify.handleError(err);\n    }).finally(() => {\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  update(data) {\n    console.log('update product', data);\n  }\n\n  render() {\n    let content = this.state.isLoading ? /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductForm, {\n      title: \"Edit Product\",\n      submitCallback: this.update,\n      product: this.state.product,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }));\n    return content;\n  }\n\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/react_1/group24_first/src/components/products/editProduct/editProduct.component.js"],"names":["React","Component","httpClient","notify","Loader","ProductForm","EditProduct","constructor","state","isLoading","product","componentDidMount","productId","props","match","params","setState","GET","then","response","data","catch","err","handleError","finally","update","console","log","render","content"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,SAASC,WAAT,QAA4B,sCAA5B;AAEA,OAAO,MAAMC,WAAN,SAA0BL,SAA1B,CAAmC;AACtCM,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,KADF;AAETC,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,SAAL,GAAiB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwB,IAAxB,CAAjB;AACA,SAAKC,QAAL,CAAc;AACVP,MAAAA,SAAS,EAAE;AADD,KAAd;AAGAP,IAAAA,UAAU,CAACe,GAAX,CAAgB,YAAW,KAAKL,SAAU,EAA1C,EAA4C,IAA5C,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,WAAKH,QAAL,CAAc;AACVN,QAAAA,OAAO,EAAES,QAAQ,CAACC;AADR,OAAd;AAGH,KALL,EAMKC,KANL,CAMWC,GAAG,IAAI;AACVnB,MAAAA,MAAM,CAACoB,WAAP,CAAmBD,GAAnB;AACH,KARL,EASKE,OATL,CASa,MAAM;AACX,WAAKR,QAAL,CAAc;AACVP,QAAAA,SAAS,EAAE;AADD,OAAd;AAGH,KAbL;AAcH;;AAEDgB,EAAAA,MAAM,CAACL,IAAD,EAAM;AACRM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BP,IAA7B;AACH;;AAEDQ,EAAAA,MAAM,GAAE;AACJ,QAAIC,OAAO,GAAG,KAAKrB,KAAL,CAAWC,SAAX,gBACd,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc,gBAGd,uDACI,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAC,cAAnB;AAAkC,MAAA,cAAc,EAAE,KAAKgB,MAAvD;AAA+D,MAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWE,OAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAHA;AAMA,WAAOmB,OAAP;AACH;;AA1CqC","sourcesContent":["import React, { Component } from 'react'\nimport httpClient from '../../util/httpClient';\nimport notify from '../../util/notify';\nimport Loader from '../../common/loader/loader.component';\nimport { ProductForm } from '../productForm/productForm.component';\n\nexport class EditProduct extends Component{\n    constructor(){\n        super();\n        this.state = {\n            isLoading: false,\n            product: ''\n        }\n    }\n    \n    componentDidMount(){\n        this.productId = this.props.match.params['id'];\n        this.setState({\n            isLoading: true\n        })\n        httpClient.GET(`/product/${this.productId}`,true)\n            .then(response => {\n                this.setState({\n                    product: response.data\n                })\n            })\n            .catch(err => {\n                notify.handleError(err);\n            })\n            .finally(() => {\n                this.setState({\n                    isLoading: false\n                })\n            })\n    }\n\n    update(data){\n        console.log('update product',data);\n    }\n\n    render(){\n        let content = this.state.isLoading ?\n        <Loader />\n        : \n        <>\n            <ProductForm title=\"Edit Product\" submitCallback={this.update} product={this.state.product} />\n        </>\n        return content;\n    }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"axios\";\nconst BaseURL = process.env.REACT_APP_BASE_URL;\nconst http = axios.create({\n  baseURL: BaseURL,\n  responseType: \"json\"\n});\n\nconst getHeaders = isSecure => {\n  let options = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (isSecure) {\n    options[\"Authorization\"] = localStorage.getItem(\"token\");\n  }\n\n  return options;\n};\n\nfunction GET(url, isSecure = false, params = {}) {\n  //   http\n  //     .get(url, {\n  //       headers: getHeaders(),\n  //       params,\n  //     })\n  //     .then((data) => {\n  //       console.log(\"success in http client >>\", data);\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"error in http client >>\", err);\n  //     });\n  return http.get(url, {\n    headers: getHeaders(isSecure),\n    params\n  });\n}\n\nfunction POST(url, data, isSecure = false, params = {}) {\n  //   return new Promise((resolve, reject) => {\n  //     http\n  //       .post(url, data, {\n  //         headers: getHeaders(),\n  //         params,\n  //       })\n  //       .then((response) => {\n  //         resolve(response);\n  //       })\n  //       .catch((err) => {\n  //         reject(err);\n  //       });\n  //   });\n  return http.post(url, data, {\n    headers: getHeaders(isSecure),\n    params\n  });\n}\n\nfunction DELETE(url, isSecure = false, params = {}) {\n  return http.delete(url, {\n    headers: getHeaders(isSecure),\n    params\n  });\n}\n\nfunction PUT(url, data, isSecure = false, params = {}) {\n  return http.put(url, data, {\n    headers: getHeaders(isSecure),\n    params\n  });\n}\n\nfunction UPLOAD(method, url, data, files, params = {}) {\n  //send request to server using xml http request\n  return new Promise((resolve, reject) => {\n    // send request to server using xml http request\n    const xhr = new XMLHttpRequest();\n    const formData = new FormData();\n\n    if (files && files.length) {\n      // console.log('files are>>',files)\n      files.map(file => formData.append(\"img\", file[0], file[0].name));\n    } // add each data in formdata\n\n\n    for (let key in data) {\n      formData.append(key, data[key]);\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        // console.log('req res cycle completed');\n        // console.log('response is here >>', xhr.response);\n        if (xhr.status === 200) {\n          resolve(xhr.response);\n        } else {\n          reject(xhr.response);\n        }\n      }\n    };\n\n    xhr.open(method, `${BaseURL}${url}?token=${localStorage.getItem(\"token\")}`, true);\n    xhr.send(formData);\n  });\n}\n\nexport default {\n  GET,\n  POST,\n  DELETE,\n  PUT,\n  UPLOAD\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/react_1/group24_first/src/components/util/httpClient.js"],"names":["axios","BaseURL","process","env","REACT_APP_BASE_URL","http","create","baseURL","responseType","getHeaders","isSecure","options","localStorage","getItem","GET","url","params","get","headers","POST","data","post","DELETE","delete","PUT","put","UPLOAD","method","files","Promise","resolve","reject","xhr","XMLHttpRequest","formData","FormData","length","map","file","append","name","key","onreadystatechange","readyState","status","response","open","send"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BaseURL = process.env.REACT_APP_BASE_URL;\nconst http = axios.create({\n  baseURL: BaseURL,\n  responseType: \"json\",\n});\n\nconst getHeaders = (isSecure) => {\n  let options = {\n    \"Content-Type\": \"application/json\",\n  };\n  if (isSecure) {\n    options[\"Authorization\"] = localStorage.getItem(\"token\");\n  }\n  return options;\n};\n\nfunction GET(url, isSecure = false, params = {}) {\n  //   http\n  //     .get(url, {\n  //       headers: getHeaders(),\n  //       params,\n  //     })\n  //     .then((data) => {\n  //       console.log(\"success in http client >>\", data);\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"error in http client >>\", err);\n  //     });\n  return http.get(url, {\n    headers: getHeaders(isSecure),\n    params,\n  });\n}\n\nfunction POST(url, data, isSecure = false, params = {}) {\n  //   return new Promise((resolve, reject) => {\n  //     http\n  //       .post(url, data, {\n  //         headers: getHeaders(),\n  //         params,\n  //       })\n  //       .then((response) => {\n  //         resolve(response);\n  //       })\n  //       .catch((err) => {\n  //         reject(err);\n  //       });\n  //   });\n  return http.post(url, data, {\n    headers: getHeaders(isSecure),\n    params,\n  });\n}\n\nfunction DELETE(url, isSecure = false, params = {}) {\n  return http.delete(url, {\n    headers: getHeaders(isSecure),\n    params,\n  });\n}\nfunction PUT(url, data, isSecure = false, params = {}) {\n  return http.put(url, data, {\n    headers: getHeaders(isSecure),\n    params,\n  });\n}\n\nfunction UPLOAD(method, url, data, files, params = {}) {\n  //send request to server using xml http request\n  return new Promise((resolve, reject) => {\n    // send request to server using xml http request\n    const xhr = new XMLHttpRequest();\n    const formData = new FormData();\n\n    if (files && files.length) {\n      // console.log('files are>>',files)\n      files.map(file => (\n        formData.append(\"img\", file[0], file[0].name)\n      ))\n    }\n\n    // add each data in formdata\n    for (let key in data) {\n      formData.append(key, data[key]);\n    }\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        // console.log('req res cycle completed');\n        // console.log('response is here >>', xhr.response);\n        if (xhr.status === 200) {\n          resolve(xhr.response);\n        } else {\n          reject(xhr.response);\n        }\n      }\n    };\n\n    xhr.open(\n      method,\n      `${BaseURL}${url}?token=${localStorage.getItem(\"token\")}`,\n      true\n    );\n    xhr.send(formData);\n  });\n}\n\nexport default {\n  GET,\n  POST,\n  DELETE,\n  PUT,\n  UPLOAD,\n};\n"]},"metadata":{},"sourceType":"module"}
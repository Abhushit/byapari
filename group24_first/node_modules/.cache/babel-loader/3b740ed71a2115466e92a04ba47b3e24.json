{"ast":null,"code":"import { SET_DELETING_ITEM, SET_IS_LOADING, PRODUCT_RECEIVED, PRODUCT_REMOVED, PRODUCT_DETAILS_LOADED, SET_PRODUCTID, ADD_TO_CART } from './../actions/products/type';\nconst initialState = {\n  isLoading: false,\n  productId: {},\n  products: [],\n  deletingItem: [],\n  addedItems: [],\n  total: 0\n}; //TODO\n\nexport const productReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PRODUCT_RECEIVED:\n      return { ...state,\n        products: action.payload\n      };\n\n    case SET_IS_LOADING:\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    case SET_PRODUCTID:\n      return { ...state,\n        productId: action.payload\n      };\n\n    case SET_DELETING_ITEM:\n      return { ...state,\n        deletingItem: action.payload\n      };\n\n    case PRODUCT_REMOVED:\n      const products = state.products; // products.splice(action.payload, 1)\n\n      return { ...state.products.splice(action.payload, 1),\n        products: products\n      };\n\n    case PRODUCT_DETAILS_LOADED:\n      return { ...state,\n        products: action.payload\n      };\n\n    case ADD_TO_CART:\n      let addedItem = state.products.find(products => products.payload === action.payload); // let existedItems = state.addedItems.find(products => action.payload === products.payload)\n\n      if (addedItem) {\n        addedItem.quantity += 1;\n        return { ...state,\n          total: state.total + addedItem.price\n        };\n      } else {\n        addedItem.quantity = 1;\n        let newTotal = state.total + addedItem.price;\n        return { ...state,\n          addedItems: [...state.addedItems, addedItem],\n          total: newTotal\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n}; //the sole purpoose of reducer is to upadte store","map":{"version":3,"sources":["/opt/lampp/htdocs/react_1/group24_first/src/reducers/product.reducer.js"],"names":["SET_DELETING_ITEM","SET_IS_LOADING","PRODUCT_RECEIVED","PRODUCT_REMOVED","PRODUCT_DETAILS_LOADED","SET_PRODUCTID","ADD_TO_CART","initialState","isLoading","productId","products","deletingItem","addedItems","total","productReducer","state","action","type","payload","splice","addedItem","find","quantity","price","newTotal"],"mappings":"AAAA,SAAQA,iBAAR,EAA0BC,cAA1B,EAAyCC,gBAAzC,EAA2DC,eAA3D,EAA2EC,sBAA3E,EAAmGC,aAAnG,EAAkHC,WAAlH,QAAqI,4BAArI;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,KADM;AAEjBC,EAAAA,SAAS,EAAE,EAFM;AAGjBC,EAAAA,QAAQ,EAAE,EAHO;AAIjBC,EAAAA,YAAY,EAAE,EAJG;AAKjBC,EAAAA,UAAU,EAAE,EALK;AAMjBC,EAAAA,KAAK,EAAE;AANU,CAArB,C,CASA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,gBAAL;AACE,aAAM,EACJ,GAAGa,KADC;AAEJL,QAAAA,QAAQ,EAAEM,MAAM,CAACE;AAFb,OAAN;;AAKF,SAAKjB,cAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELP,QAAAA,SAAS,EAAEQ,MAAM,CAACE;AAFb,OAAP;;AAKF,SAAKb,aAAL;AACI,aAAM,EACJ,GAAGU,KADC;AAEJN,QAAAA,SAAS,EAAEO,MAAM,CAACE;AAFd,OAAN;;AAKJ,SAAKlB,iBAAL;AACE,aAAM,EACJ,GAAGe,KADC;AAEJJ,QAAAA,YAAY,EAAEK,MAAM,CAACE;AAFjB,OAAN;;AAKF,SAAKf,eAAL;AACE,YAAMO,QAAQ,GAAGK,KAAK,CAACL,QAAvB,CADF,CAEE;;AACA,aAAM,EACJ,GAAGK,KAAK,CAACL,QAAN,CAAeS,MAAf,CAAsBH,MAAM,CAACE,OAA7B,EAAqC,CAArC,CADC;AAEJR,QAAAA,QAAQ,EAAEA;AAFN,OAAN;;AAKF,SAAKN,sBAAL;AACE,aAAM,EACJ,GAAGW,KADC;AAEJL,QAAAA,QAAQ,EAAEM,MAAM,CAACE;AAFb,OAAN;;AAKF,SAAKZ,WAAL;AACE,UAAIc,SAAS,GAAGL,KAAK,CAACL,QAAN,CAAeW,IAAf,CAAoBX,QAAQ,IAAIA,QAAQ,CAACQ,OAAT,KAAqBF,MAAM,CAACE,OAA5D,CAAhB,CADF,CAEE;;AAEA,UAAGE,SAAH,EAAa;AACXA,QAAAA,SAAS,CAACE,QAAV,IAAsB,CAAtB;AACA,eAAM,EACJ,GAAGP,KADC;AAEJF,UAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAcO,SAAS,CAACG;AAF3B,SAAN;AAID,OAND,MAOI;AACFH,QAAAA,SAAS,CAACE,QAAV,GAAqB,CAArB;AACA,YAAIE,QAAQ,GAAGT,KAAK,CAACF,KAAN,GAAcO,SAAS,CAACG,KAAvC;AACA,eAAM,EACJ,GAAGR,KADC;AAEJH,UAAAA,UAAU,EAAE,CAAC,GAAGG,KAAK,CAACH,UAAV,EAAsBQ,SAAtB,CAFR;AAGJP,UAAAA,KAAK,EAAEW;AAHH,SAAN;AAKD;;AAGH;AACE,aAAO,EACL,GAAGT;AADE,OAAP;AA9DJ;AAkED,CAnEM,C,CAsEP","sourcesContent":["import {SET_DELETING_ITEM,SET_IS_LOADING,PRODUCT_RECEIVED, PRODUCT_REMOVED,PRODUCT_DETAILS_LOADED, SET_PRODUCTID, ADD_TO_CART } from './../actions/products/type';\n\n\nconst initialState = {\n    isLoading: false,\n    productId: {},\n    products: [],\n    deletingItem: [],\n    addedItems: [],\n    total: 0\n};\n\n//TODO\nexport const productReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PRODUCT_RECEIVED:\n      return{\n        ...state,\n        products: action.payload\n      }\n\n    case SET_IS_LOADING :\n      return {\n        ...state,\n        isLoading: action.payload\n      }\n\n    case SET_PRODUCTID:\n        return{\n          ...state,\n          productId: action.payload\n        }  \n    \n    case SET_DELETING_ITEM :\n      return{\n        ...state,\n        deletingItem: action.payload\n      }\n\n    case PRODUCT_REMOVED:\n      const products = state.products;\n      // products.splice(action.payload, 1)\n      return{\n        ...state.products.splice(action.payload,1),\n        products: products\n      }\n    \n    case PRODUCT_DETAILS_LOADED:\n      return{\n        ...state,\n        products: action.payload\n      }\n\n    case ADD_TO_CART :\n      let addedItem = state.products.find(products => products.payload === action.payload)  \n      // let existedItems = state.addedItems.find(products => action.payload === products.payload)\n\n      if(addedItem){\n        addedItem.quantity += 1\n        return{\n          ...state,\n          total: state.total + addedItem.price\n        }\n      }\n      else{\n        addedItem.quantity = 1\n        let newTotal = state.total + addedItem.price\n        return{\n          ...state,\n          addedItems: [...state.addedItems, addedItem],\n          total: newTotal\n        }\n      }\n\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\n\n//the sole purpoose of reducer is to upadte store"]},"metadata":{},"sourceType":"module"}
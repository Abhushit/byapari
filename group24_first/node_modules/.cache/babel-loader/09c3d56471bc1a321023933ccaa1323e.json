{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/react_1/group24_first/src/components/auth/forgotPassword/forgotPassword.component.js\";\nimport React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport httpClient from \"../../util/httpClient\";\nimport notify from \"../../util/notify\";\nexport default class ForgotPassword extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        data: {\n          [name]: value\n        }\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n        isSubmitting: true\n      });\n      httpClient.POST('/auth/register', this.state.data, {\n        responseType: json\n      }).then(data => {\n        notify.showSuccess('Password is Changed');\n        this.props.history.push('/');\n      }).catch(err => {\n        notify.handleError(err);\n        this.setState({\n          isSubmitting: false\n        });\n      });\n    };\n\n    this.state = {\n      data: {\n        email: ''\n      },\n      error: {\n        email: ''\n      },\n      isSubmitting: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Forgot Password\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Please provide your email address to reset your password\"), /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        email: \"\"\n      },\n      validate: values => {\n        const errors = {};\n\n        if (!values.email) {\n          errors.email = \"Required Email\";\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n          errors.email = \"Invalid Email Address\";\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }), ({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting\n      /* and other goodies */\n\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"email\",\n      name: \"email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 12\n      }\n    }), errors.email && touched.email && errors.email, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 12\n      }\n    }, \"Submit\")));\n  }\n\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/react_1/group24_first/src/components/auth/forgotPassword/forgotPassword.component.js"],"names":["React","Component","Formik","httpClient","notify","ForgotPassword","constructor","handleChange","e","name","value","target","setState","data","handleSubmit","preventDefault","isSubmitting","POST","state","responseType","json","then","showSuccess","props","history","push","catch","err","handleError","email","error","render","values","errors","test","setSubmitting","setTimeout","alert","JSON","stringify","touched","handleBlur"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport httpClient from \"../../util/httpClient\";\nimport notify from \"../../util/notify\";\n\nexport default class ForgotPassword extends Component {\n  constructor() {\n    super();\n    this.state = {\n        data: {\n            email: ''\n        },\n        error: {\n            email: ''\n        },\n        isSubmitting: false\n    };\n  }\n\n  handleChange = e => {\n      const { name, value} = e.target;\n      this.setState({\n          data: {\n              [name] : value\n          }\n      })\n  }\n\n  handleSubmit = e => {\n      e.preventDefault();\n      this.setState({\n          isSubmitting: true\n      })\n      httpClient.POST('/auth/register', this.state.data, {responseType: json})\n        .then(data => {\n            notify.showSuccess('Password is Changed');\n            this.props.history.push('/');\n        })\n        .catch(err => {\n            notify.handleError(err);\n            this.setState({\n                isSubmitting:false\n            })\n        })\n  }\n\n  render() {\n    return (\n      <>\n        <h2>Forgot Password</h2>\n        <p>Please provide your email address to reset your password</p>\n        <Formik\n          initialValues={{ email: \"\" }}\n          validate={(values) => {\n            const errors = {};\n            if (!values.email) {\n              errors.email = \"Required Email\";\n            } else if (\n              !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n            ) {\n              errors.email = \"Invalid Email Address\";\n            }\n            return errors;\n          }}\n          onSubmit={(values, { setSubmitting }) => {\n            setTimeout(() => {\n              alert(JSON.stringify(values, null, 2));\n              setSubmitting(false);\n            }, 400);\n          }}\n        />\n        {({\n         values,\n         errors,\n         touched,\n         handleChange,\n         handleBlur,\n         handleSubmit,\n         isSubmitting,\n         /* and other goodies */\n       }) => (\n         <form onSubmit={handleSubmit} className=\"form-group\">\n           <input\n           className=\"form-control\"\n             type=\"email\"\n             name=\"email\"\n             onChange={handleChange}\n             onBlur={handleBlur}\n             value={values.email}\n           />\n           {errors.email && touched.email && errors.email}\n           \n           <button className=\"btn btn-primary\" type=\"submit\" disabled={isSubmitting}>\n             Submit\n           </button>\n         </form>\n       )}\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}